import React from 'react';
import './style.scss'

const TaskItem = class extends React.Component{
   constructor (props) {
      super  ( props )

      let titleBuffer = this.props.title
      this.state={
         title: this.props.title
      }
      this.toggleEditButtonHandler = this.toggleEditButtonHandler.bind(this)
      this.toggleCompletedMode = this.toggleCompletedMode.bind(this)
      this.removeFromTaskList = this.removeFromTaskList.bind(this)
      this.titleChangeHandler = this.titleChangeHandler.bind(this)
      this.keyHandler = this.keyHandler.bind(this)
   }

   // –ü–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∞
   componentDidMount() { 
      // –∞–Ω–∏–º–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞
      if ( this.props.state.new ) {
         setTimeout ( ()=>{ 
            this.updateTask ({
               id: this.props.id,
            }, {
               new: false
            })
         }, 50)
      }
   }

   // –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   componentDidUpdate(prevProps, prevState) {
   }

// –§—É–Ω–∫—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

   //–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—á—Ç–µ–Ω–∏—è
   setEditMode (mode, callBack = () => (true)) {
      if ( mode === undefined ) { console.error ( 'setEditMode (mode=? ...' ); return false }

      this.updateTask ({
         id: this.props.id
      }, {
         edit: mode
      })
   }

   // –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π
   toggleEditButtonHandler () {
      if ( !this.props.state.edit) {
         this.setEditMode(true)
      } else {
         if ( this.props.newAdder ) {
            this.addToTaskList( this.state.title, this.props.completed )
            this.updateTask ({id: this.props.id, title: ''})
         } else {
            this.updateTask ({
               id: this.props.id,
               title: this.state.title,
            },{
               edit: false
            })
         }
      }
   }

   // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ—Ç–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏
   toggleCompletedMode () {
      this.updateTask ({
         id: this.props.id,
         completed: !this.props.completed
      })
   }

   // –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç —Å—Ç–µ–π—Ç –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
   addToTaskList (title, completed) {
      this.props.changeTaskHandler( {
         type: 'add',
         payload: {
            title: title,
            completed: completed,
            state: {
               edit: false,
               new: true
            }
         }
      } )
   }

   // –£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å—Ç–µ–π—Ç –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏c–∫–∞
   removeFromTaskList () {
      if ( !this.props.newAdder ) {
         // –í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è
         this.updateTask ({id: this.props.id}, {removed: true})
         // –£–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
         setTimeout ( ()=>{ 
            this.props.changeTaskHandler ({
               type: "remove",
               payload: {
                  id: this.props.id
               }
            }) 
         }, 300 )
      }
   }

   titleChangeHandler (e) {
      this.setState ( {
         ...this.state,
         title: e.target.value
      } )
   }

   keyHandler(e) {
      if ( e.key === 'Enter' ) this.toggleEditButtonHandler()
      if ( e.key === 'Escape' ) {
         this.titleBuffer = this.props.title
         this.toggleEditButtonHandler ()
      }
   }

   updateTask (taskProps, taskState, afterStateUpdateCbk = () => (true)) {
      this.props.changeTaskHandler ({
         type: "update",
         payload: {
            ...taskProps,
            state: {
               ...this.props.state,
               ...taskState
            }
         }
      }, afterStateUpdateCbk)
   }

   // render
   render () {
      const arrClassNames = [
         "taskItem",
         this.props.completed || this.props.state.completed ? 'taskItem__completed' : 'taskItem__non-completed',
         this.props.state.edit ? 'taskItem__edit' : undefined,
         this.props.state.removed ? 'taskItem__removed' : undefined,
         this.props.newAdder ? 'taskItem__newAdder' : undefined,
         this.props.state.new ? 'taskItem__new' : undefined,
      ]

      const completedSymbol=this.props.completed || this.props.state.completed ? '‚úîÔ∏è' : "üõ†Ô∏è"

      return <div id={'task_'+this.props.id} className={arrClassNames.join(' ')}>
         <div className="state" onClick={this.toggleCompletedMode}>{completedSymbol}</div>
         <div className="edit" onClick={this.toggleEditButtonHandler}>‚úèÔ∏è</div>
         <div className="remove" onClick={this.removeFromTaskList} >‚úñÔ∏è</div>

         <div className="taskTitle">
            {
            this.props.state.edit
               ? <input 
                   type="text"
                   value={this.state.title}
                   onChange={this.titleChangeHandler}
                   onKeyDown={this.keyHandler}
                   placeholder={this.props.placeholder}
                   autoFocus
                 />
               : this.props.title || this.props.placeholder
            }
            
         </div>
      </div>
   }
}

export default TaskItem
